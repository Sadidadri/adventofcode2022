"""
--- Part Two ---
A rope snaps! Suddenly, the river is getting a lot closer than you remember. The bridge is still there, but some of the ropes that broke are now whipping toward you as you fall through the air!

The ropes are moving too quickly to grab; you only have a few seconds to choose how to arch your body to avoid being hit. Fortunately, your simulation can be extended to support longer ropes.

Rather than two knots, you now must simulate a rope consisting of ten knots. One knot is still the head of the rope and moves according to the series of motions. Each knot further down the rope follows the knot in front of it using the same rules as before.

Using the same series of motions as the above example, but with the knots marked H, 1, 2, ..., 9, the motions now occur as follows:

== Initial State ==

......
......
......
......
H.....  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)

== R 4 ==

......
......
......
......
1H....  (1 covers 2, 3, 4, 5, 6, 7, 8, 9, s)

......
......
......
......
21H...  (2 covers 3, 4, 5, 6, 7, 8, 9, s)

......
......
......
......
321H..  (3 covers 4, 5, 6, 7, 8, 9, s)

......
......
......
......
4321H.  (4 covers 5, 6, 7, 8, 9, s)

== U 4 ==

......
......
......
....H.
4321..  (4 covers 5, 6, 7, 8, 9, s)

......
......
....H.
.4321.
5.....  (5 covers 6, 7, 8, 9, s)

......
....H.
....1.
.432..
5.....  (5 covers 6, 7, 8, 9, s)

....H.
....1.
..432.
.5....
6.....  (6 covers 7, 8, 9, s)

== L 3 ==

...H..
....1.
..432.
.5....
6.....  (6 covers 7, 8, 9, s)

..H1..
...2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

.H1...
...2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

== D 1 ==

..1...
.H.2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

== R 4 ==

..1...
..H2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

..1...
...H..  (H covers 2)
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

......
...1H.  (1 covers 2)
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

......
...21H
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

== D 1 ==

......
...21.
..43.H
.5....
6.....  (6 covers 7, 8, 9, s)

== L 5 ==

......
...21.
..43H.
.5....
6.....  (6 covers 7, 8, 9, s)

......
...21.
..4H..  (H covers 3)
.5....
6.....  (6 covers 7, 8, 9, s)

......
...2..
..H1..  (H covers 4; 1 covers 3)
.5....
6.....  (6 covers 7, 8, 9, s)

......
...2..
.H13..  (1 covers 4)
.5....
6.....  (6 covers 7, 8, 9, s)

......
......
H123..  (2 covers 4)
.5....
6.....  (6 covers 7, 8, 9, s)

== R 2 ==

......
......
.H23..  (H covers 1; 2 covers 4)
.5....
6.....  (6 covers 7, 8, 9, s)

......
......
.1H3..  (H covers 2, 4)
.5....
6.....  (6 covers 7, 8, 9, s)
Now, you need to keep track of the positions the new tail, 9, visits. In this example, the tail never moves, and so it only visits 1 position. However, be careful: more types of motion are possible than before, so you might want to visually compare your simulated rope to the one above.

Here's a larger example:

R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20
These motions occur as follows (individual steps are not shown):

== Initial State ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........H..............  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)
..........................
..........................
..........................
..........................
..........................

== R 5 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........54321H.........  (5 covers 6, 7, 8, 9, s)
..........................
..........................
..........................
..........................
..........................

== U 8 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
................H.........
................1.........
................2.........
................3.........
...............54.........
..............6...........
.............7............
............8.............
...........9..............  (9 covers s)
..........................
..........................
..........................
..........................
..........................

== L 8 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
........H1234.............
............5.............
............6.............
............7.............
............8.............
............9.............
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

== D 3 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
.........2345.............
........1...6.............
........H...7.............
............8.............
............9.............
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

== R 17 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
................987654321H
..........................
..........................
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

== D 10 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........s.........98765
.........................4
.........................3
.........................2
.........................1
.........................H

== L 25 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
H123456789................

== U 20 ==

H.........................
1.........................
2.........................
3.........................
4.........................
5.........................
6.........................
7.........................
8.........................
9.........................
..........................
..........................
..........................
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

Now, the tail (9) visits 36 positions (including s) at least once:

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
#.........................
#.............###.........
#............#...#........
.#..........#.....#.......
..#..........#.....#......
...#........#.......#.....
....#......s.........#....
.....#..............#.....
......#............#......
.......#..........#.......
........#........#........
.........########.........
Simulate your complete series of motions on a larger rope with ten knots. How many positions does the tail of the rope visit at least once?

"""

__author__ = "Adrián Ángel Moya Moruno"

data = {}
#0 will be H and 9 will be T
for i in range(10):
    data['current_'+str(i)+'_position'] = "0,0"
#saved position is an auxiliar pos that will be useful to store the position of a knot of the movement that was executed before
data['saved_position'] = "0,0"
tail_visited_positions = ['0,0']

def execute_line(direction,n_moves):
    for i in range(n_moves):
        for i in range(0,10):
            execute_movement(i,direction)

def execute_movement(index,direction):
    #Get the value of a single movement:
    movement_coordinate = move_one_cell(direction)
    #First move the element in the head:
    if (index == 0):
        data['saved_position'] = data['current_'+str(0)+'_position']
        data['current_'+str(0)+'_position'] = add_coordinates(data['current_'+str(0)+'_position'],movement_coordinate)
        return
    #Then check if the tail needs to follow the head:
    xHeadCoor,yHeadCoor = data['current_'+str(index-1)+'_position'].split(',')
    xTailCoor,yTailCoor = data['current_'+str(index)+'_position'].split(',')
    xResult = int(xHeadCoor) - int(xTailCoor)
    yResult = int(yHeadCoor) - int(yTailCoor)
    #if (needToMoveTail(xResult,yResult)):
    save_current_pos = data['current_'+str(index)+'_position']
    data['current_'+str(index)+'_position'] = data['saved_position']
    data['saved_position'] = save_current_pos
        # if(isDiagonalMovement(xResult,yResult)):
        #     xFinalCoordinate = xResult
        #     yFinalCoordinate = yResult
        #     if (xResult == 2):
        #         xFinalCoordinate = 1
        #     elif (xResult == -2):
        #         xFinalCoordinate = -1
        #     elif (yResult == 2):
        #         yFinalCoordinate = 1
        #     else: #(xResult == -2)
        #         yFinalCoordinate = -1
        #     #Finally move in diagonal
        #     finalCoordinate = str(xFinalCoordinate)+","+str(yFinalCoordinate)
        #     data['current_'+str(index)+'_position'] = add_coordinates(data['current_'+str(index)+'_position'],finalCoordinate)
        # else:
        #     data['current_'+str(index)+'_position'] = add_coordinates(data['current_'+str(index)+'_position'],movement_coordinate)
        #Register last tail movement in our historic
    if (index == 9):
        if data['current_'+str(index)+'_position'] not in tail_visited_positions:
            tail_visited_positions.append(data['current_'+str(index)+'_position'])


def move_one_cell(direction):
    if(direction == 'L'): #LEFT
        return "-1,0"
    elif(direction == 'R'): #RIGHT
        return "1,0"
    elif(direction == 'D'): #DOWN
        return "0,-1"
    else: #UP
        return "0,1"

def add_coordinates(current_coordinate,coordinate_to_add):
    xCurrentCoor,yCurrentCoor = current_coordinate.split(',')
    xAddCoor,yAddCoor = coordinate_to_add.split(',')
    
    xResult = int(xCurrentCoor) + int(xAddCoor)
    yResult = int(yCurrentCoor) + int(yAddCoor)

    return str(xResult)+","+str(yResult)

#We check both positions, if there is a difference of 2 in one of the edges, we know that we have to move the tail also
def needToMoveTail(xResult,yResult):
    return abs(xResult) >= 2 or abs(yResult) >= 2

def isDiagonalMovement(xResult,yResult):
    return abs(xResult) > 0 and abs(yResult) > 0

f = open("./input.txt", "r")
for line in f.readlines()[:5]:
    line = line.replace("\n", "")
    direction, n_moves = line.split(' ')
    n_moves = int(n_moves)
    execute_line(direction,n_moves)

#print(data)
print(tail_visited_positions)
print("The tail has visited "+str(len(tail_visited_positions))+" cells")